import { SeoOptions } from "./seo";
import { ExtendedRequest, ExtendedResponse, SiteMeta, LastModifiedByLocale, Middleware } from "./common";
export interface BablicOptions {
    siteId: string;
    rootUrl?: string;
    locale?: string;
    forceLocale?: string;
    subDir?: boolean;
    subDirBase?: string;
    subDirOptional?: boolean;
    onReady?: () => void;
    seo?: SeoOptions;
    folders?: {
        [locale: string]: string;
    };
    meta?: SiteMeta;
    snippet?: string;
    keywords?: {
        [urlKeyword: string]: {
            [locale: string]: string;
        };
    };
    lastModified?: LastModifiedByLocale;
}
export interface SiteData {
    id?: string;
    error?: string;
    snippet: string;
    meta: SiteMeta;
    keywords?: {
        [urlKeyword: string]: {
            [locale: string]: string;
        };
    };
    lastModified: LastModifiedByLocale;
}
export declare const BackwardCompSEOOptions: {
    useCache: string[];
    defaultCache: string[];
};
export declare class BablicSDK {
    meta: SiteMeta;
    lastModified: LastModifiedByLocale;
    snippet: string;
    snippetAsync: string;
    private options;
    private LOCALE_REGEX;
    private seoMiddleware;
    private keywordsByLocale;
    private reverseKeywordByLocale;
    private seoHandler;
    handle: Middleware;
    constructor(options: BablicOptions);
    getSiteMeta(cbk: (e?: Error) => void): void;
    saveSiteMeta(data: SiteData): void;
    snippetUrl(): string;
    getLocale(req: ExtendedRequest): string;
    private getSiteMetaInner;
    loadSiteMeta(cbk: (e?: Error) => void): void;
    handleBablicCallback(req: ExtendedRequest, res: ExtendedResponse): void;
    getLink(locale: string, url: string, fromLocale?: string): string;
    altTags(url: string, locale: string): string;
    purgeCache(): Promise<void>;
    purgeByUrl(url: string, locale: string): Promise<void>;
    private generateOriginalPath;
    private generateTranslatedPath;
    private handler;
    private processKeywords;
}
